for( i in 1:TotLen) {
# to do some implementations here
pred <- ifelse(dtall$x >= threshall[i], 1, 0)
TP <- sum(pred == 1 & labelallval == 1)
FP <- sum(pred == 1 & labelallval == 0)
FN <- sum(pred == 0 & labelallval == 1)
TN <- sum(pred == 0 & labelallval == 0)
tprall[i] <- TP / (TP + FN) # Sensitivity
fprall[i] <- FP / (FP + TN) # 1 - Specificity
#fnrall[i] <- FN / (TP + FN)
}
# saving the plot
#show ROC curve
plot(fprall, tprall, type="o", xlim=c(0,1), ylim=c(0,1), xlab="1-specificity", ylab="sensitivity", cex.lab=1.5)
dev.copy(png,"myROC.png")
dev.off()
rm(list=ls())
# read data
dtcon <- read.table("Sham.data", header=TRUE)
dtcas <- read.table("PAB.data", header=TRUE)
colnames(dtcon) <- 'x'
colnames(dtcas) <- 'x'
trlabel1 <- rep('control', nrow(dtcon))
trlabel2 <- rep('case', nrow(dtcas))
#stack up data for convenience
dtall <- rbind(dtcon, dtcas)
labelall <- c(trlabel1, trlabel2)
labelallval <- rep(0, length(labelall))
labelallval[labelall == "control"] <- 0
labelallval[labelall == "case"] <- 1
id1 <- (labelallval == 1)
id0 <- (labelallval == 0)
#set the direction for testing
detcasek <- 1
if (mean(dtcon[,1]) > mean(dtcas[,1])) {
detcasek <- 2
}
#prepare threshold values
minv <- min( dtall[,1] )
rm(list=ls())
# read data
dtcon <- read.table("Sham.data", header=TRUE)
dtcas <- read.table("PAB.data", header=TRUE)
colnames(dtcon) <- 'x'
dev.off()
rm(list=ls())
# read data
dtcon <- read.table("Sham.data", header=TRUE)
setwd("~/Desktop/3-1/DataMining/HomeWork/HW2")
# read data
dtcon <- read.table("Sham.data", header=TRUE)
dtcas <- read.table("PAB.data", header=TRUE)
colnames(dtcon) <- 'x'
colnames(dtcas) <- 'x'
trlabel1 <- rep('control', nrow(dtcon))
trlabel2 <- rep('case', nrow(dtcas))
#stack up data for convenience
dtall <- rbind(dtcon, dtcas)
labelall <- c(trlabel1, trlabel2)
labelallval <- rep(0, length(labelall))
labelallval[labelall == "control"] <- 0
labelallval[labelall == "case"] <- 1
id1 <- (labelallval == 1)
id0 <- (labelallval == 0)
#set the direction for testing
detcasek <- 1
if (mean(dtcon[,1]) > mean(dtcas[,1])) {
detcasek <- 2
}
#prepare threshold values
minv <- min( dtall[,1] )
maxv <- max( dtall[,1] )
TotLen <- 10
threshall <- seq(minv,maxv,length.out=TotLen)
tprall <- rep(0,TotLen) # Sensitivity
#fnrall <- rep(0,TotLen)
fprall <- rep(0,TotLen) # 1 - Specificity
for( i in 1:TotLen) {
# to do some implementations here
pred <- ifelse(dtall$x >= threshall[i], 1, 0)
TP <- sum(pred == 1 & labelallval == 1)
FP <- sum(pred == 1 & labelallval == 0)
FN <- sum(pred == 0 & labelallval == 1)
TN <- sum(pred == 0 & labelallval == 0)
tprall[i] <- TP / (TP + FN) # Sensitivity
fprall[i] <- FP / (FP + TN) # 1 - Specificity
#fnrall[i] <- FN / (TP + FN)
}
# saving the plot
#show ROC curve
plot(fprall, tprall, type="o", xlim=c(0,1), ylim=c(0,1), xlab="1-specificity", ylab="sensitivity", cex.lab=1.5)
dev.copy(png,"myROC.png")
dev.off()
library(dplyr)
## Part1
setwd("~/Desktop/3-1/DataMining/HomeWork/HW2")
train_data <- read.csv("HWtrain.data.txt", header = FALSE)
test_data <- read.csv("HWtest.data.txt", header = FALSE)
train <- train_data[, -1]
train_y <-train_data[, 1]
test <- test_data[, -1]
train.pr <- prcomp(train, scale = TRUE)
summary(train.pr)
#Creating a biplot
biplot(train.pr)
#Getting proportion of variance for a scree plot
train.pr.var <- train.pr$sdev^2
pve <- train.pr.var / sum(train.pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Portion of Variance Explaine",
ylim = c(0, 1), type = "b")
# (a) When we use the first two principle components,
# how much information of the total do we use?
sprintf("%.2f%%", sum(pve[1:2]) * 100)
# (b) Find the top-three original variables among
# the 13 that contributed to the construction
# of the first principle component.
abs(train.pr$rotation[, 1]) %>%
sort(decreasing = TRUE) %>%
head(3)
## Part2
library(readxl)
data2 <- read_xlsx("HW2_data_2.xlsx")
data2$Y <- as.factor(data2$Y)
data2_X <- data2$Xun
data2_norm_X <- (data2_X - min(data2_X)) / (max(data2_X) - min(data2_X))
data2_norm <- data2
data2_norm$Xun <- data2_norm_X
data2_norm_1 <- data2_norm # cut-off value 0.4
data2_norm_1$Y <- as.factor(ifelse(data2_norm$Xun >= 0.4, 1, 0))
data2_norm_2 <- data2_norm # cut-off value 0.5
data2_norm_2$Y <- as.factor(ifelse(data2_norm$Xun >= 0.5, 1, 0))
data2_norm_3 <- data2_norm # cut-off value 0.4
data2_norm_3$Y <- as.factor(ifelse(data2_norm$Xun >= 0.6, 1, 0))
#confusionMatrix(data2_norm_1$Y, data2_norm$Y)
#confusionMatrix(data2_norm_2$Y, data2_norm$Y)
#confusionMatrix(data2_norm_3$Y, data2_norm$Y)
confusionMat <- function(pred, actual)
{
TP <- sum(pred$Y == 1 & actual$Y == 1)
FP <- sum(pred$Y == 1 & actual$Y == 0)
FN <- sum(pred$Y == 0 & actual$Y == 1)
TN <- sum(pred$Y == 0 & actual$Y == 0)
confuMat <- matrix(c(TP, FP, FN, TN), byrow = TRUE, nrow = 2, ncol = 2)
confuMat_df <- data.frame(confuMat, row.names = c("pred_True(1)", "pred_False(0)"))
colnames(confuMat_df) <- c("act_True(1)", "act_False(0)")
confuMat_df
accur <- (TP + TN) / (TP + FP + FN + TN)
sensi <- TP / (TP + FN)
speci <- TN / (FP + TN)
preci <- TP / (TP + FP)
result.list <- list(ConfusionMatrix = confuMat_df, Accuracy = accur,
Sensitivity = sensi, Specificity = speci,
Precision = preci)
return(result.list)
}
confusionMat(data2_norm_1, data2_norm)
confusionMat(data2_norm_2, data2_norm)
confusionMat(data2_norm_3, data2_norm)
dev.off()
rm(list=ls())
# read data
dtcon <- read.table("Sham.data", header=TRUE)
dtcas <- read.table("PAB.data", header=TRUE)
colnames(dtcon) <- 'x'
colnames(dtcas) <- 'x'
trlabel1 <- rep('control', nrow(dtcon))
trlabel2 <- rep('case', nrow(dtcas))
#stack up data for convenience
dtall <- rbind(dtcon, dtcas)
labelall <- c(trlabel1, trlabel2)
labelallval <- rep(0, length(labelall))
labelallval[labelall == "control"] <- 0
labelallval[labelall == "case"] <- 1
id1 <- (labelallval == 1)
id0 <- (labelallval == 0)
#set the direction for testing
detcasek <- 1
if (mean(dtcon[,1]) > mean(dtcas[,1])) {
detcasek <- 2
}
#prepare threshold values
minv <- min( dtall[,1] )
maxv <- max( dtall[,1] )
TotLen <- 10
threshall <- seq(minv,maxv,length.out=TotLen)
tprall <- rep(0,TotLen) # Sensitivity
#fnrall <- rep(0,TotLen)
fprall <- rep(0,TotLen) # 1 - Specificity
for( i in 1:TotLen) {
# to do some implementations here
pred <- ifelse(dtall$x >= threshall[i], TRUE, FALSE)
TP <- sum(pred == id1 & labelallval == id1)
FP <- sum(pred == id1 & labelallval == id0)
FN <- sum(pred == id0 & labelallval == id1)
TN <- sum(pred == id0 & labelallval == id0)
tprall[i] <- TP / (TP + FN) # Sensitivity
fprall[i] <- FP / (FP + TN) # 1 - Specificity
#fnrall[i] <- FN / (TP + FN)
}
# saving the plot
#show ROC curve
plot(fprall, tprall, type="o", xlim=c(0,1), ylim=c(0,1), xlab="1-specificity", ylab="sensitivity", cex.lab=1.5)
dev.copy(png,"myROC.png")
pred == id1
sum(pred == id1 & labelallval == id1)
tprall
fprall
sum(pred == id1 & labelallval == id0)
sum(pred == id0 & labelallval == id1)
sum(pred == id0 & labelallval == id0)
dev.off()
rm(list=ls())
# read data
dtcon <- read.table("Sham.data", header=TRUE)
dtcas <- read.table("PAB.data", header=TRUE)
colnames(dtcon) <- 'x'
colnames(dtcas) <- 'x'
trlabel1 <- rep('control', nrow(dtcon))
dev.off()
trlabel2 <- rep('case', nrow(dtcas))
#stack up data for convenience
dtall <- rbind(dtcon, dtcas)
labelall <- c(trlabel1, trlabel2)
labelallval <- rep(0, length(labelall))
labelallval[labelall == "control"] <- 0
labelallval[labelall == "case"] <- 1
id1 <- (labelallval == 1)
id0 <- (labelallval == 0)
#set the direction for testing
detcasek <- 1
if (mean(dtcon[,1]) > mean(dtcas[,1])) {
detcasek <- 2
}
#prepare threshold values
minv <- min( dtall[,1] )
maxv <- max( dtall[,1] )
TotLen <- 10
threshall <- seq(minv,maxv,length.out=TotLen)
tprall <- rep(0,TotLen) # Sensitivity
#fnrall <- rep(0,TotLen)
fprall <- rep(0,TotLen) # 1 - Specificity
for( i in 1:TotLen) {
# to do some implementations here
pred <- ifelse(dtall$x >= threshall[i], TRUE, FALSE)
TP <- sum(pred == id1 & labelallval == id1)
FP <- sum(pred == id1 & labelallval == id0)
FN <- sum(pred == id0 & labelallval == id1)
TN <- sum(pred == id0 & labelallval == id0)
tprall[i] <- TP / (TP + FN) # Sensitivity
fprall[i] <- FP / (FP + TN) # 1 - Specificity
#fnrall[i] <- FN / (TP + FN)
}
# saving the plot
#show ROC curve
plot(fprall, tprall, type="o", xlim=c(0,1), ylim=c(0,1), xlab="1-specificity", ylab="sensitivity", cex.lab=1.5)
dev.copy(png,"myROC.png")
dev.off()
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2_Prob_3_Rscript.R', echo=TRUE)
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2_Prob_3_Rscript.R', echo=TRUE)
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2_Prob_3_Rscript.R', echo=TRUE)
fprall
fprall
tprall
dev.off()
rm(list=ls())
## Part1
setwd("~/Desktop/3-1/DataMining/HomeWork/HW2")
train_data <- read.csv("HWtrain.data.txt", header = FALSE)
test_data <- read.csv("HWtest.data.txt", header = FALSE)
train <- train_data[, -1]
train_y <-train_data[, 1]
test <- test_data[, -1]
train.pr <- prcomp(train, scale = TRUE)
summary(train.pr)
library(ggplot2)
# (c)
plot(train.pr)
#mydata = read.table("data_2.txt", header = TRUE)
mydata <- read.table("data_2.txt", header = TRUE)
setwd("~/Desktop/3-1/DataMining/Lec5/Lec5_DataMining_chap4_PCA_DimRed/R_PCA")
setwd("~/Desktop/3-1/DataMining/Lec5/Lec5_DataMining_chap4_PCA_DimRed/R_PCA")
#mydata = read.table("data_2.txt", header = TRUE)
mydata <- read.table("data_2.txt", header = TRUE)
mydata[1:3, 1:ncol(mydata)]
modelname <- princomp(mydata)
summary(modelname)
modelname$loadings
modelname$scores
myscore <- modelname$scores
plot(myscore[,1], myscore[,2], xlim=c(-100,100), ylim=c(-100,100))
mydata
mydata[1:3, 1:ncol(mydata)]
modelname <- princomp(mydata)
modelname
summary(modelname)
modelname$loadings
modelname$scores
myscore <- modelname$scores
plot(myscore[,1], myscore[,2], xlim=c(-100,100), ylim=c(-100,100))
plot(mydata)
train.pr <- princomp(train, scale = TRUE)
train.pr <- princomp(train)
train_norm <- (train - mean(train)) / sd(train)
mean(train)
train
my < c(1,2,3,4)
my <- c(1,2,3,4)
mean(my)
train_norm <- scale(train)
train_norm
sum(train)
sum(train_norm)
head(train_norm)
?scale
train.pr <- princomp(train_norm)
summary(train.pr)
#Creating a biplot
biplot(train.pr)
#Getting proportion of variance for a scree plot
train.pr.var <- train.pr$sdev^2
pve <- train.pr.var / sum(train.pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Portion of Variance Explaine",
ylim = c(0, 1), type = "b")
# (a) When we use the first two principle components,
# how much information of the total do we use?
sprintf("%.2f%%", sum(pve[1:2]) * 100)
# (b) Find the top-three original variables among
# the 13 that contributed to the construction
# of the first principle component.
abs(train.pr$rotation[, 1]) %>%
sort(decreasing = TRUE) %>%
head(3)
train.pr
str(train.pr)
modelname$loadings
modelname$scores
# (b) Find the top-three original variables among
# the 13 that contributed to the construction
# of the first principle component.
abs(train.pr$loadings[, 1]) %>%
sort(decreasing = TRUE) %>%
head(3)
summary(train.pr)
train.pr$loadings
train.pr$loadings[, 1]
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2")
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2", col =train_y)
legend(col = train_y)
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2", col = train_y)
legend(col = train_y)
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2", col = train_y, cex = 1)
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2", col = train_y, cex = 2)
?pch
?text
text(train.pr$scores[,1], train.pr$scores[,2], labels = train_y)
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2", col = train_y)
text(train.pr$scores[,1], train.pr$scores[,2], labels = train_y)
?text
plot(train.pr$scores[,1], train.pr$scores[,2], xlab = "PC1", ylab = "PC2", col = train_y)
text(train.pr$scores[,1], train.pr$scores[,2], labels = train_y, pos = 4)
text(train.pr$scores[,1], train.pr$scores[,2], labels = train_y, pos = 4, col = train_y)
plot(train.pr$scores[,1], train.pr$scores[,2],
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
plot(
train.pr$scores[,1]
)
library(dplyr)
library(ggplot2)
## Part1
setwd("~/Desktop/3-1/DataMining/HomeWork/HW2")
train_data <- read.csv("HWtrain.data.txt", header = FALSE)
test_data <- read.csv("HWtest.data.txt", header = FALSE)
train <- train_data[, -1]
train_y <-train_data[, 1]
test <- test_data[, -1]
train_norm <- scale(train)
train.pr <- princomp(train_norm)
summary(train.pr)
#Creating a biplot
biplot(train.pr)
#Getting proportion of variance for a scree plot
train.pr.var <- train.pr$sdev^2
pve <- train.pr.var / sum(train.pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Portion of Variance Explaine",
ylim = c(0, 1), type = "b")
# (a) When we use the first two principle components,
# how much information of the total do we use?
sprintf("%.2f%%", sum(pve[1:2]) * 100)
# (b) Find the top-three original variables among
# the 13 that contributed to the construction
# of the first principle component.
abs(train.pr$loadings[, 1]) %>%
sort(decreasing = TRUE) %>%
head(3)
plot(train.pr$scores[,1], train.pr$scores[,2],
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
train.pr$scores[,1]
train.pr$loadings[, 1]
train.pr$loadings[, 1:2]
as.matrix(train.pr$loadings[, 1:2])
test
as.matrix(test) %*% as.matrix(train.pr$loadings[, 1:2])
test_norm <- scale(test)
as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
class(test.pr)
test.pr$x
test.pr[x]
class(train.pr)
class(train.pr$scores)
points(test.pr[,1], test.pr[,2])
points(test.pr[,1], test.pr[,2], col = "blue")
points(test.pr[,1], test.pr[,2], col = "blue", pch = 17)
text(test.pr[,1], test.pr[,2],
labels = "test", pos = 4, col = "blue")
points(test.pr[,1], test.pr[,2], col = "blue", pch = 10)
plot(train.pr$scores[,1], train.pr$scores[,2],
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch = 5)
text(test.pr[,1], test.pr[,2],
labels = "test", pos = 4, col = "blue")
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 1,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 0.1,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 0.2,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 0.5,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch = 5)
text(test.pr[,1], test.pr[,2],
labels = "test", pos = 4, col = "blue")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y, cex = 0.5)
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y, cex = 0.1)
test
text(test.pr[,1], test.pr[,2],
labels = test, pos = 4, col = "blue")
text(test.pr[,1], test.pr[,2],
labels = 1:5, pos = 4, col = "blue")
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 0.5,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch = 5)
text(test.pr[,1], test.pr[,2],
labels = 1:5, pos = 4, col = "blue")
## Part2
library(readxl)
?pch
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 0.5, pch = 20,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch =22)
text(test.pr[,1], test.pr[,2],
labels = 1:5, pos = 4, col = "blue")
plot(train.pr$scores[,1], train.pr$scores[,2], cex = 0.5, pch = 20,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch =15)
text(test.pr[,1], test.pr[,2],
labels = 1:5, pos = 4, col = "blue", cex = 1.2)
plot(train.pr$scores[,1], train.pr$scores[,2], pch = 20,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y, cex = 0.6)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch =15)
text(test.pr[,1], test.pr[,2],
labels = 1:5, pos = 4, col = "blue", cex = 1.2)
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2.R', echo=TRUE)
dev.copy(png,"predictWineQuality.png")
dev.copy(png,"predictWineQuality.png")
dev.off()
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2.R', echo=TRUE)
plot(train.pr$scores[,1], train.pr$scores[,2], pch = 20,
xlab = "PC1", ylab = "PC2", col = train_y, main = "Wine quality ")
text(train.pr$scores[,1], train.pr$scores[,2],
labels = train_y, pos = 4, col = train_y, cex = 0.6)
test_norm <- scale(test)
test.pr <- as.matrix(test_norm) %*% as.matrix(train.pr$loadings[, 1:2])
points(test.pr[,1], test.pr[,2], col = "blue", pch =15)
text(test.pr[,1], test.pr[,2],
labels = 1:5, pos = 4, col = "blue", cex = 1.2)
png("predictWineQuality.png", width=400, height=300, pointsize=13)
dev.off()
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2.R', echo=TRUE)
