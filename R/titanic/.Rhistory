?n
library(dplyr)
?n_distinct
?left_join
?join
?intersect
?intersect
?union
rnorm(10)
test <- rnorm(1000)
hist(test)
test <- rnorm(10000, m = 10, sd = 1)
hist(test)
seq(0, 10, 0.1)
hist(seq(0, 10, 0.1))
lm(seq(0, 10, 0.1))
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
source('~/.active-rstudio-document', echo=TRUE)
head(mtcars)
lm(formula = mpg ~wt)
hist(mtcars$mpg)
?plot
?plot.default
# A Simple Axis Example((# specify the data (x <- c(1:10); y <- x; z <- 10/x((# create extra margin room on the right for an axis (par(mar=c(5, 4, 4, 8) + 0.1)((# plot x vs. y (plot(x, y,type="b", pch=21, col="red", (   yaxt="n", lty=3, xlab="", ylab="")((# add x vs. 1/x (lines(x, z, type="b", pch=22, col="blue", lty=2)((# draw an axis on the left (axis(2, at=x,labels=x, col.axis="red", las=2)((# draw an axis on the right, with smaller text and ticks (axis(4, at=z,labels=round(z,digits=2),(  col.axis="blue", las=2, cex.axis=0.7, tck=-.01)((# add a title for the right axis (mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")((# add a main title and bottom and left axis labels (title("An Example of Creative Axes", xlab="X values",(   ylab="Y=X")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#advanced version
install.packages("car")
source('~/.active-rstudio-document', echo=TRUE)
lm(mpg ~disp)
hist(lm(mpg ~disp))
hist(mpg ~disp)
source('~/.active-rstudio-document', echo=TRUE)
require(MASS)
# attach graphics library
require(lattice)
Cars93[1:3,]
glimpse(Cars93)
dim(Cars93)
ncol(Cars93)
nrow(Cars93)
colnames(Cars93)
# Scatterplot of the data
# graphics setup
trellis.par.set(theme=col.whitebg())
?trellis.par.set
# plotting
with(Cars93,xyplot(100/MPG.highway~Weight,
ylab="Gallons per 100 miles",
main="Cars(1993 Makes & Models)",pch=16))
# Modelling:  Cars and Fuel Economy
with(Cars93,xyplot(100/MPG.highway~Weight,
ylab="Gallons per 100 miles",pch=16,
main="Cars(1993 Makes & Models)",
panel =
function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y,col="red", ...)
}))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
install.packages("data.table")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
getwd()
titanic <- read.csv("titanic.csv")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(data.table)
library(ggplot2)
titanic <- read.csv("titanic.csv")
#분석 편의상 data.table로 변환한다.
titanic.dt <- as.data.table(titanic)
names(titanic.dt)
head(titanic.dt)
titanic.dt$survived <- as.factor(titanic.dt$survived)
#15세 미만을 아이로 본다.
titanic.dt[,isminor:="adult"]
titanic.dt[age < 15,isminor:="child"]
titanic.dt$isminor <- as.factor(titanic.dt$isminor)
# 등급별 생존률
titanic.dt[, length(which(survived == 1))/nrow(.SD), by=pclass]
# 성별 생존률
titanic.dt[, length(which(survived == 1))/nrow(.SD), by=sex]
#등급/성별 생존률
survived_pclass_sex <- titanic.dt[, list(cntsurv=length(which(survived == 1)), cntdie=length(which(survived == 0))),
by=list(pclass, sex)][,list(psurvived=cntsurv/(cntsurv + cntdie)),by=list(pclass, sex)]
ggplot(survived_pclass_sex, aes(pclass, sex)) +
geom_tile(aes(fill=psurvived)) + scale_fill_gradient2("생존률") + xlab("승객등급") + ylab("성별")
#성별, 등급, 나이별 생존률
survived_pclass_sex_isminor<- titanic.dt[,list(cntsurv=length(which(survived == 1)), cntdie=length(which(survived == 0))),by=list(pclass, sex, isminor)][,list(psurvived=cntsurv/(cntsurv + cntdie)),by=list(pclass, sex, isminor)]
survived_pclass_sex_isminor$sex_age <- apply(survived_pclass_sex_isminor[,list(sex,isminor)], 1, paste, collapse="_")
library(scales)
ggplot(survived_pclass_sex_isminor, aes(pclass, sex_age)) +
geom_tile(aes(fill=psurvived)) + scale_fill_gradient2("생존률", low=muted("white"), high=muted("blue")) + xlab("승객등급") + ylab("성별과 나이")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(data.table)
library(ggplot2)
titanic <- read.csv("titanic.csv")
#분석 편의상 data.table로 변환한다.
titanic.dt <- as.data.table(titanic)
names(titanic.dt)
head(titanic.dt)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
titanic.dt[,isminor:="adult"]
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/Desktop/3-1/DataMining/R_reference_codes/Rscript_titanic.R', encoding = 'CP949', echo=TRUE)
library(data.table)
library(ggplot2)
titanic <- read.csv("titanic.csv")
#분석 편의상 data.table로 변환한다.
titanic.dt <- as.data.table(titanic)
names(titanic.dt)
head(titanic.dt)
titanic.dt$survived <- as.factor(titanic.dt$survived)
#15세 미만을 아이로 본다.
titanic.dt[,isminor:="adult"]
titanic.dt[age < 15,isminor:="child"]
titanic.dt$isminor <- as.factor(titanic.dt$isminor)
# 등급별 생존률
titanic.dt[, length(which(survived == 1))/nrow(.SD), by=pclass]
# 성별 생존률
titanic.dt[, length(which(survived == 1))/nrow(.SD), by=sex]
#등급/성별 생존률
survived_pclass_sex <- titanic.dt[, list(cntsurv=length(which(survived == 1)), cntdie=length(which(survived == 0))),
by=list(pclass, sex)][,list(psurvived=cntsurv/(cntsurv + cntdie)),by=list(pclass, sex)]
ggplot(survived_pclass_sex, aes(pclass, sex)) +
geom_tile(aes(fill=psurvived)) + scale_fill_gradient2("생존률") + xlab("승객등급") + ylab("성별")
#성별, 등급, 나이별 생존률
survived_pclass_sex_isminor<- titanic.dt[,list(cntsurv=length(which(survived == 1)), cntdie=length(which(survived == 0))),by=list(pclass, sex, isminor)][,list(psurvived=cntsurv/(cntsurv + cntdie)),by=list(pclass, sex, isminor)]
survived_pclass_sex_isminor$sex_age <- apply(survived_pclass_sex_isminor[,list(sex,isminor)], 1, paste, collapse="_")
library(scales)
ggplot(survived_pclass_sex_isminor, aes(pclass, sex_age)) +
geom_tile(aes(fill=psurvived)) + scale_fill_gradient2("생존률", low=muted("white"), high=muted("blue")) + xlab("승객등급") + ylab("성별과 나이")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address,   "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
}
url("Seoul")
geoCode(url("Seoul"))
geoCode("Seoul")
ls
ls()
View(titanic.dt)
View(titanic)
install.packages("testthat")
source('~/.active-rstudio-document', echo=TRUE)
install.packages('gridExtra')
install.packages('corrplot')
install.packages('GGally')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('e1071')
install.packages('dplyr')
install.packages("dplyr")
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/3-1/DataMining/EDAreferenceCode/readme_script2.R', echo=TRUE)
train <- fread('train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
test <- fread('test.csv' ,colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
library(purrr)
vignette("databases", package = "dplyr")
install.packages("Lahman")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install.packages("Lahman")
?tally
?summarize
?summarise
?summarize
??summarize
library(dplyr)
?summarize
?bind_rows
?distinct
?left_join
?group_by
by_cyl <- mtcars %>% group_by(cyl)
View(by_cyl)
View(by_cyl)
car <- mtcars
View(car)
View(car)
?join
?join
?semi_join
library(dplyr)
?join
install.packages("MASS")
library(MASS)
plot(mtcars)
?points
install.packages()
install.packages("car")
library(car)
str(mtcars)
mtcars %>%
select(mpg, cyl, hp)
mtcars %>%
select("mpg", "cyl", "hp")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mtcars %>%
select(mpg, cyl, hp)
?select
library(dplyr)
mtcars %>%
select(mpg, cyl, hp)
?select
mtcars %>%
select(mpg)
mtcars %>%
select(mpg)
mtcars %>%
select(mtcars$mpg)
mtcars %>%
select(.data$mpg)
select(mtcars, .data$cyl)
mtcars
mtcars %>%
select(mpg)
mtcars %>%
select(mpg)
mtcars
select(mtcars, mpg, cyl)
library(dplyr)
select(mtcars, mpg, cyl)
mtcars %>%
select(mpg, cyl, hp)
source('~/.active-rstudio-document', echo=TRUE)
carData <- mtcars %>%
select(mpg, cyl, hp)
source('~/.active-rstudio-document', echo=TRUE)
library(dplyr, ggplot2)
?ggplot2
boxplot(carData)
lm(carData)
hist(lm(carData))
plot(carData)
head(carData)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
class(cyl4)
?sapply
cylall <- list(cyl4, cyl6, cyl8)
lapply(cylall, mean)
cylall
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cbind(mean(cyl4), mean(cyl6), mean(cyl8 ))
cyl4
cbind(mean(cyl4$hp), mean(cyl6$hp), mean(cyl8$hp))
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
cbind(mean(cyl4$hp), mean(cyl6$hp), mean(cyl8$hp))
plot(mtcars$hp, mtcars$cyl)
plot(mtcars$cyl,mtcars$hp)
plot(mtcars$cyl,mtcars$mpg)
plot(mtcars$hp,mtcars$mpg)
plot(mtcars$hp ~ mtcars$mpg)
?glm
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
print(d.AD <- data.frame(treatment, outcome, counts))
glm.D93 <- glm(counts ~ outcome + treatment, family = poisson())
anova(glm.D93)
summary(glm.D93)
### Add more variable...
modelcv4 <- train(Price ~ Age_08_04 + KM + HP + Met_Color + Automatic + CC
+ Doors + Quarterly_Tax, data = carData,  method = "lm",
trControl = trainControl(method = "cv", number = 5,verboseIter = TRUE))
gl(3,1,9)
?gl
outcome
treatment
?predict
?ifelse
?confusionMatrix
library(caret)
?confusionMatrix
?trainControl
?train
?tuneLength
?twoClassSummary
?classProbs
?trainControl
?twoClassSummary
?preProcess
?createFolds
?train
?resamples
?knn
library(class)
?table
library(naivebaye)
install.packages("naivebayes")
library(naivebaye)
library(naivebayes)
install.packages("pROC")
library(pROC)
?relevel
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1903/datasets/WisconsinCancer.csv"
# Download the data: wisc.df
wisc.df <- read.csv(url)
# Convert the features of the data: wisc.data
wisc.data <- as.matrix(wisc.df[3:32])
# Set the row names of wisc.data
row.names(wisc.data) <- wisc.df$id
source('~/Desktop/CancerAnalysis.R', echo=TRUE)
plot(runif(10000))
plot(runif(100000))
# A Simple Axis Example
# specify the data
x <- c(1:10); y <- x; z <- 10/x
# create extra margin room on the right for an axis
par(mar=c(5, 4, 4, 8) + 0.1)
# plot x vs. y
plot(x, y,type="b", pch=21, col="red",
yaxt="n", lty=3, xlab="", ylab="")
# add x vs. 1/x
lines(x, z, type="b", pch=22, col="blue", lty=2)
# draw an axis on the left
axis(2, at=x,labels=x, col.axis="red", las=2)
# draw an axis on the right, with smaller text and ticks
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a title for the right axis
mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")
# add a main title and bottom and left axis labels
title("An Example of Creative Axes", xlab="X values",
# draw an axis on the right, with smaller text and ticks
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a title for the right axis
mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")
# add a main title and bottom and left axis labels
# draw an axis on the right, with smaller text and ticks
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a title for the right axis
mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")
ylab="Y=X")
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a main title and bottom and left axis labels
title("An Example of Creative Axes", xlab="X values",
# draw an axis on the right, with smaller text and ticks
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a title for the right axis
mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")
# add a main title and bottom and left axis labels
# draw an axis on the right, with smaller text and ticks
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a title for the right axis
mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")
ylab="Y=X")
# add a main title and bottom and left axis labels
# draw an axis on the right, with smaller text and ticks
axis(4, at=z,labels=round(z,digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
# add a title for the right axis
mtext("y=1/x", side=4, line=3, cex.lab=1,las=2, col="blue")
title("An Example of Creative Axes", xlab="X values",
ylab="Y=X")
# Legend Example(attach(mtcars)(boxplot(mpg~cyl, main="Milage by Car Weight",(   yaxt="n", xlab="Milage", horizontal=TRUE,(   col=terrain.colors(3))(legend("topright", inset=.05, title="Number of Cylinders",(   c("4","6","8"), fill=terrain.colors(3), horiz=TRUE)
# Legend Example(attach(mtcars)(boxplot(mpg~cyl, main="Milage by Car Weight",(   yaxt="n", xlab="Milage", horizontal=TRUE,(   col=terrain.colors(3))(legend("topright", inset=.05, title="Number of Cylinders",(   c("4","6","8"), fill=terrain.colors(3), horiz=TRUE)
# Legend Example
attach(mtcars)(boxplot(mpg~cyl, main="Milage by Car Weight",(   yaxt="n", xlab="Milage", horizontal=TRUE,(   col=terrain.colors(3))(legend("topright", inset=.05, title="Number of Cylinders",(   c("4","6","8"), fill=terrain.colors(3), horiz=TRUE)
boxplot(mpg~cyl, main="Milage by Car Weight",
yaxt="n", xlab="Milage", horizontal=TRUE,
col=terrain.colors(3))
# Legend Example
attach(mtcars)
boxplot(mpg~cyl, main="Milage by Car Weight",
yaxt="n", xlab="Milage", horizontal=TRUE,
col=terrain.colors(3))
legend("topright", inset=.05, title="Number of Cylinders",
c("4","6","8"), fill=terrain.colors(3), horiz=TRUE)
source('~/Desktop/3-1/DataMining/HomeWork/HW2/HW2.R', echo=TRUE)
#set the direction for testing
detcasek <- 1
setwd("~/Desktop/titanic")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
head(train)
setwd("~/Desktop/titanic")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(test)
str(train)
head(train)
train1 <- train[, -c("Ticket", "Cabin")]
train1 <- train[, c("Ticket", "Cabin")]
colnames(train1)
colnames(train)
colnames(train)- c("Ticket", "Cabin")
library(dplyr)
train1 <- train %>% select("PassengerID")
train1 <- train[, c(-"Ticket", - "Cabin")]
train1 <- train[, c(1, 3, 5, 6, 7, 8, 10, 12)]
train1
str(train1)
train_Survived <- train[, "Survived"]
head(test)
test1 <- test[, c(1, 2, 4, 5, 6, 7, 9, 11)]
head(test1)
head(train1)
is.na(train1)
sum(is.na(train1))
sum(is.na(train1$Age))
?preprocess
library(caret)
?preprocess
?preProcess
sum(is.na(test1))
?train
str(train1)
train(train_Survived ~ train1)
train1
train
str(train)
train1 <- train[, c(1, 2, 3, 5, 6, 7, 8, 10, 12)]
train (Survived ~ ., data = train1, method = "ranger",
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE))
train1 <- train[, c(1, 2, 3, 5, 6, 7, 8, 10, 12)]
train_Survived <- train[, "Survived"]
test1 <- test[, c(1, 2, 4, 5, 6, 7, 9, 11)]
train (Survived ~ ., data = train1, method = "ranger",
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE))
train (train$Survived ~ ., data = train1, method = "ranger",
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE))
train (train$Survived ~ train1$Pclass, data = train1, method = "ranger",
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE))
train (train1$Survived ~ train1$Pclass + train1$Sex + train1$Age +
train1$SibSp + train$Parch, method = "ranger",
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE))
train1$Survived
train (train1$Survived ~ train1$Pclass + train1$Sex + train1$Age +
train1$SibSp + train$Parch, method = "ranger",
trControl = trainControl(
method = "cv", number = 5, verboseIter = TRUE,preProcess = "medianImpute"))
train (train1$Survived ~ train1$Pclass + train1$Sex +
train1$SibSp + train$Parch, method = "ranger",
trControl = trainControl(
method = "cv", number = 5, verboseIter = TRUE, preProcess = "medianImpute"))
train (train1$Survived ~ train1$Pclass + train1$Sex +
train1$SibSp + train$Parch, method = "ranger",
trControl = trainControl(
method = "cv", number = 5, verboseIter = TRUE, preProcess = "knnImpute"))
train (train1$Survived ~ train1$Pclass + train1$Sex +
train1$SibSp + train$Parch, method = "ranger",
trControl = trainControl(
method = "cv", number = 5, verboseIter = TRUE))
train (train1$Survived ~ train1$Pclass + train1$Sex +
train1$SibSp + train$Parch, data = train1, method = "ranger",
trControl = trainControl(
method = "cv", number = 5, verboseIter = TRUE))
train (Survived ~ Pclass + Sex + SibSp + Parch,
data = train1, method = "ranger",
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE))
glm(Survived ~ ., data = train1, family = "binomial")
train.logistic <- glm(Survived ~ ., data = train1, family = "binomial")
predict(train.logistic)
predict(train.logistic, type = "response")
